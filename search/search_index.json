{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Aidan's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a Dev Container for Rust","text":"<p>Primary Author: Aidan Lee Reviewer: Sushant Marella</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have the following installed and accessible:</p> <ul> <li>GitHub account to host the project online.</li> <li>Git to manage version control and upload the project to GitHub.</li> <li>Visual Studio Code (VS Code) to compile Rust code and configure the dev container.</li> <li>Docker to run the development container.</li> <li>WiFi to access remote repositories.</li> </ul>"},{"location":"tutorials/rust-setup/#part-1-project-setup-creating-the-repository","title":"Part 1: Project Setup - Creating the Repository","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-repository","title":"Step 1: Create a Local Repository","text":"<ol> <li>Open your terminal or command prompt.</li> <li> <p>Create a new directory for your project, preferably in an easily accessible location:</p> <pre><code>mkdir rust-hello-423\ncd rust-hello-423\n</code></pre> </li> <li> <p>Initialize a Git repository in your folder:</p> <pre><code>git init\n</code></pre> <p>Note</p> <p>This Git repository will help manage your commits and local project changes.</p> </li> <li> <p>Create a <code>README.md</code> file to document your project:</p> <pre><code>echo \"COMP423 Rust Tutorial: https://aidanjlee5.github.io/comp423-course-notes/tutorials/rust-setup/\" &gt; README.md\n</code></pre> <p>Note</p> <p>This is optional for the tutorial, but linking to the tutorial source is good for citing purposes.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-2-create-your-github-repository","title":"Step 2: Create Your GitHub Repository","text":"<ol> <li>Log in to your GitHub account.</li> <li>Navigate to the Create a New Repository page.</li> <li>Use the following settings for your repository:</li> <li>Repository Name: <code>rust-hello-423</code></li> <li>Description: A basic Rust tutorial that outputs \"Hello COMP423\".</li> <li>Visibility: Public.</li> <li>Do not initialize with a README, <code>.gitignore</code>, or license file.</li> </ol>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link Your Local Repository to GitHub","text":"<ol> <li> <p>Add the GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-hello-423.git\n</code></pre> </li> <li> <p>Check your branch name with <code>git branch</code>. If it\u2019s not <code>main</code>, rename it to <code>main</code>:</p> <pre><code>git branch -M main\n</code></pre> <p>Note</p> <p>Older versions of Git use <code>master</code> as the primary branch. Modern conventions use <code>main</code>.</p> </li> <li> <p>Push your local commits to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Tip</p> <p>The <code>--set-upstream</code> flag (short version: <code>-u</code>) links your local branch to the remote branch. After this, you can simply run <code>git push</code> or <code>git pull</code> without specifying branch names.</p> </li> <li> <p>Refresh your GitHub repository in your browser to confirm the push was successful. The commit ID and message in your local repository should match those on GitHub.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":""},{"location":"tutorials/rust-setup/#step-1-create-the-development-container","title":"Step 1: Create the Development Container","text":"<ol> <li>Open the <code>rust-hello-423</code> directory in VS Code:</li> <li>Use File &gt; Open Folder in the menu, or  </li> <li> <p>Run the command:</p> <pre><code>code .\n</code></pre> </li> <li> <p>Install the Dev Containers extension in VS Code.</p> </li> <li> <p>Create a <code>.devcontainer</code> directory in the root of your project. Inside this directory, add a <code>devcontainer.json</code> file with the following content:</p> <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-2-open-the-project-in-a-dev-container","title":"Step 2: Open the Project in a Dev Container","text":"<ol> <li>Reopen the project in a Dev Container:</li> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac).</li> <li>Type: Dev Containers: Reopen in Container and select it.</li> <li>Wait a few minutes for the container image to download and install.</li> <li> <p>Verify that Rust is installed by running:</p> <pre><code>rustc --version\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-3-create-a-new-binary-project","title":"Step 3: Create a New Binary Project","text":"<ol> <li> <p>Run the following command to create a new Rust project:</p> <pre><code>cargo new hello_world --vcs none\n</code></pre> <p>Explanation</p> <p>The <code>--vcs none</code> flag prevents Cargo from creating another Git repository for the project.</p> </li> <li> <p>Overwrite the contents of the <code>main.rs</code> file in the <code>src</code> directory with this code:</p> <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre> </li> </ol>"},{"location":"tutorials/rust-setup/#step-4-build-the-rust-program","title":"Step 4: Build the Rust Program","text":"<ol> <li> <p>Change into the <code>hello_world</code> directory:</p> <pre><code>cd hello_world\n</code></pre> </li> <li> <p>Build your Rust program:</p> <pre><code>cargo build\n</code></pre> <p>Note</p> <p>This command compiles the program and creates an executable in the <code>target/debug/</code> directory by default. For optimized builds, executables go to the <code>target/release</code> directory.</p> </li> <li> <p>Run the compiled executable:</p> <pre><code>./target/debug/hello_world\n</code></pre> <p>Note</p> <p>This is similar to using <code>gcc</code> in COMP211, where:</p> <pre><code>gcc -o hello_world main.c\n</code></pre> <p>generates a <code>hello_world</code> binary that can be run with <code>./hello_world</code>.</p> <p>Warning</p> <p>Remember to <code>cd ..</code> to exit the directory before making any changes</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-5-running-the-project","title":"Step 5: Running the Project","text":"<p>Instead of building and running separately, you can use:</p> <pre><code>cargo run\n</code></pre> <p>This compiles the program and immeidately runs the resulting binary</p>"},{"location":"tutorials/rust-setup/#step-6-publishing-your-project-on-github","title":"Step 6: Publishing your Project on GitHub","text":"<p>When you\u2019re ready:</p> <pre><code>git add .\ngit commit -m \"Initial Go Dev Container setup\"\n</code></pre> <p>Push to GitHub if you have a remote set up:</p> <pre><code>git remote add origin &lt;your-repo-url&gt;\ngit push -u origin main\n</code></pre>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion:","text":"<p>By following this tutorial, you now have a fully functional Rust development environment using VS Code Dev Containers. You\u2019ve also created a basic Rust program that outputs \"Hello COMP423\" and learned the basics of working with Cargo for building and running projects. This setup mirrors professional workflows in Rust development, giving you insight into its use in the industry.</p>"}]}